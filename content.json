{"meta":{"title":"HYmn's blog","subtitle":"人生不满百，常怀千岁忧。","description":"。","author":"HYmn","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"第一篇博客","slug":"my-new-post","date":"2019-08-15T03:14:56.000Z","updated":"2019-08-15T03:26:24.675Z","comments":true,"path":"2019/08/15/my-new-post/","link":"","permalink":"http://yoursite.com/2019/08/15/my-new-post/","excerpt":"","text":"摘自 Effective C++ 条款2尽量使用 而不用要尽量有“输入输出流的概念” cin cout最重要的原因当然是C++提供了流对象‘&gt;&gt;’和‘&lt;&lt;’，它们代表了新观念。流对象能输出对象，而printf函数和scanf函数不能。此外，起码还有下面两个次要原因。 首先让我们观察一下printf函数和scanf函数的声明，它们分别是： int printf( char *, …); int scanf( char *, …); 我们看到，除了第一个参数要求是char *以外，其余参数的类型不限，个数也不限。 从这一点能够看出，C语言对函数参数的数据类型是不做严格的检查的，但是C++语言却是要做严格的类型检查的，这与C++支持函数重载有关。 再者，在一个程序里，如果cin、cout和scanf、printf混合使用，系统不能保证他们的执行次序是正确的， 假如我们希望输出‘我吃’，也许输出的是‘吃我’。尽管C++提供了解决这个问题的途径，但是一般不提倡这样做。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-12-05T09:04:16.123Z","updated":"2017-12-05T09:04:16.124Z","comments":true,"path":"2017/12/05/hello-world/","link":"","permalink":"http://yoursite.com/2017/12/05/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}